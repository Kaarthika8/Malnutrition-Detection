import numpy as np
import matplotlib.pyplot as plt

# Input and expected outputs for AND and OR gates
inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_and = np.array([0, 0, 0, 1])  # AND gate output
y_or = np.array([0, 1, 1, 1])   # OR gate output

# Initialize weights and bias
weights = np.random.rand(2)
bias = np.random.rand(1)
learning_rate = 0.1
epochs = 5000

# Sigmoid function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(output):
    return output * (1 - output)

# Training function
def train(inputs, targets):
    global weights, bias
    for _ in range(epochs):
        for i in range(len(inputs)):
            # Forward pass
            z = np.dot(inputs[i], weights) + bias
            output = sigmoid(z)

            # Compute error
            error = targets[i] - output

            # Backward pass (gradient descent with sigmoid derivative)
            delta = error * sigmoid_derivative(output)
            weights += learning_rate * delta * inputs[i]
            bias += learning_rate * delta

# Train and get outputs for AND gate
train(inputs, y_and)
outputs_and = [sigmoid(np.dot(i, weights) + bias) for i in inputs]

# Print final outputs for AND gate
print("AND Gate Outputs:")
for i, output in enumerate(outputs_and):
    print(f"Input: {inputs[i]} -> Output: {output[0]:.4f}")

# Reset weights and bias, then train for OR gate
weights = np.random.rand(2)
bias = np.random.rand(1)
train(inputs, y_or)
outputs_or = [sigmoid(np.dot(i, weights) + bias) for i in inputs]

# Print final outputs for OR gate
print("\nOR Gate Outputs:")
for i, output in enumerate(outputs_or):
    print(f"Input: {inputs[i]} -> Output: {output[0]:.4f}")

# Plot results
plt.figure(figsize=(10, 5))
plt.plot(range(4), outputs_and, marker='o', label='AND Gate', color='blue')
plt.plot(range(4), outputs_or, marker='o', label='OR Gate', color='orange')
plt.xticks(range(4), ['00', '01', '10', '11'])
plt.title('AND and OR Gate Outputs After Training')
plt.xlabel('Inputs (x1, x2)')
plt.ylabel('Output')
plt.legend()
plt.grid(True)
plt.show()
