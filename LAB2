import numpy as np
from sklearn.datasets import load_diabetes, load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import pandas as pd

# Function to load datasets
def load_data(dataset_name):
    if dataset_name == "diabetes":
        # Load Diabetes dataset from sklearn
        data = load_diabetes(as_frame=True)
        X = data.data
        y = (data.target > data.target.mean()).astype(int)  # Convert regression to binary classification
    elif dataset_name == "cancer":
        # Load Cancer dataset from sklearn
        data = load_breast_cancer()
        X = data.data
        y = data.target
    elif dataset_name == "sonar":
        # Load Sonar dataset from a URL
        data = pd.read_csv("https://raw.githubusercontent.com/jbrownlee/Datasets/master/sonar.csv", header=None)
        X = data.iloc[:, :-1].values
        y = data.iloc[:, -1].apply(lambda x: 1 if x == "M" else 0).values
    else:
        raise ValueError("Invalid dataset name. Choose from 'diabetes', 'cancer', or 'sonar'.")

    # Standardize the features
    scaler = StandardScaler()
    X = scaler.fit_transform(X)
    return train_test_split(X, y, test_size=0.2, random_state=42)

# Function to build and train the model
def build_and_train_model(X_train, X_test, y_train, y_test, activation="relu"):
    model = Sequential([
        Dense(32, input_dim=X_train.shape[1], activation=activation),
        Dense(16, activation=activation),
        Dense(1, activation='sigmoid')  # Sigmoid for binary classification
    ])

    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    model.fit(X_train, y_train, epochs=50, batch_size=16, verbose=0)
    
    # Evaluate the model
    y_pred = (model.predict(X_test) > 0.5).astype(int)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Accuracy with activation function '{activation}': {accuracy:.4f}")

# Main script
for dataset in ["diabetes", "cancer", "sonar"]:
    print(f"\n--- Training on {dataset.upper()} dataset ---")
    X_train, X_test, y_train, y_test = load_data(dataset)
    for activation in ["sigmoid", "tanh", "relu", "softmax"]:
        try:
            build_and_train_model(X_train, X_test, y_train, y_test, activation)
        except Exception as e:
            print(f"Error with activation '{activation}': {e}")
