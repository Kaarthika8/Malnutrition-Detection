import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score
import matplotlib.pyplot as plt


class LeNet5(nn.Module):
    def __init__(self):
        super(LeNet5, self).__init__()
        # Layer 1: Convolutional Layer
        self.conv1 = nn.Conv2d(1, 6, kernel_size=5, stride=1, padding=0)  # 6 feature maps
        # Layer 2: Subsampling (Max pooling)
        self.pool1 = nn.AvgPool2d(2, 2)  # Subsampling with 2x2 kernel (average pooling)

        # Layer 3: Convolutional Layer
        self.conv2 = nn.Conv2d(6, 16, kernel_size=5, padding=0)  # 16 feature maps
        # Layer 4: Subsampling (Max pooling)
        self.pool2 = nn.AvgPool2d(2, 2)  # Subsampling with 2x2 kernel (average pooling)

        # Layer 5: Fully Connected Layer
        self.fc1 = nn.Linear(16 * 4 * 4, 84)  # Adjust input size to 16 * 4 * 4 = 256
        # Layer 6: Fully Connected Layer
        self.fc2 = nn.Linear(84, 10)  # Output layer with 10 classes for MNIST digits

    def forward(self, x):
        # Layer 1: Apply convolution followed by Tanh activation
        x = torch.tanh(self.conv1(x))
        # Layer 2: Max Pooling
        x = self.pool1(x)

        # Layer 3: Apply convolution followed by Tanh activation
        x = torch.tanh(self.conv2(x))
        # Layer 4: Max Pooling
        x = self.pool2(x)

        # Flatten the tensor for the fully connected layers
        x = x.view(x.size(0), -1)  # Flatten the tensor

        # Layer 5: Fully connected layer with Tanh activation
        x = torch.tanh(self.fc1(x))
        # Layer 6: Output layer
        x = self.fc2(x)

        # Apply softmax on the output (after the last fully connected layer)
        x = torch.softmax(x, dim=1)  # Apply softmax across the output dimension (dim=1)

        return x


batch_size = 64
learning_rate = 0.01
epochs = 10

# Transformations for preprocessing the dataset
transform = transforms.Compose([
    transforms.ToTensor(),  # Convert to tensor
    transforms.Normalize((0.5,), (0.5,))  # Normalize with mean and std deviation
])

# Download the MNIST dataset
trainset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)
testset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)

trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False)


model = LeNet5()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

train_losses, val_losses = [], []
train_accuracies, val_accuracies = [], []


for epoch in range(epochs):
    model.train()
    running_loss = 0.0
    correct_train = 0
    total_train = 0

    for inputs, labels in trainloader:
        optimizer.zero_grad()

        # Forward pass
        outputs = model(inputs)
        loss = criterion(outputs, labels)

        # Backward pass
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

        _, predicted = torch.max(outputs, 1)
        total_train += labels.size(0)
        correct_train += (predicted == labels).sum().item()

    train_loss = running_loss / len(trainloader)
    train_accuracy = 100 * correct_train / total_train

    # Validation phase
    model.eval()
    correct_val = 0
    total_val = 0
    running_val_loss = 0.0

    with torch.no_grad():
        for inputs, labels in testloader:
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            running_val_loss += loss.item()

            _, predicted = torch.max(outputs, 1)
            total_val += labels.size(0)
            correct_val += (predicted == labels).sum().item()

    val_loss = running_val_loss / len(testloader)
    val_accuracy = 100 * correct_val / total_val

    # Store the results for plotting
    train_losses.append(train_loss)
    val_losses.append(val_loss)
    train_accuracies.append(train_accuracy)
    val_accuracies.append(val_accuracy)

    print(f"Epoch [{epoch + 1}/{epochs}], Train Loss: {train_loss:.4f}, Train Accuracy: {train_accuracy:.2f}%, "
          f"Val Loss: {val_loss:.4f}, Val Accuracy: {val_accuracy:.2f}%")

model.eval()
all_labels = []
all_predictions = []

with torch.no_grad():
    for inputs, labels in testloader:
        outputs = model(inputs)
        _, predicted = torch.max(outputs, 1)
        all_labels.extend(labels.numpy())
        all_predictions.extend(predicted.numpy())

accuracy = accuracy_score(all_labels, all_predictions)
precision = precision_score(all_labels, all_predictions, average='weighted')
recall = recall_score(all_labels, all_predictions, average='weighted')
f1 = f1_score(all_labels, all_predictions, average='weighted')

print(f"Test Accuracy: {accuracy:.2f}")
print(f"Test Precision: {precision:.2f}")
print(f"Test Recall: {recall:.2f}")
print(f"Test F1 Score: {f1:.2f}")


fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

# Loss plot
ax1.plot(range(epochs), train_losses, label='Train Loss')
ax1.plot(range(epochs), val_losses, label='Validation Loss')
ax1.set_title('Train and Validation Loss')
ax1.set_xlabel('Epoch')
ax1.set_ylabel('Loss')
ax1.legend()

# Accuracy plot
ax2.plot(range(epochs), train_accuracies, label='Train Accuracy')
ax2.plot(range(epochs), val_accuracies, label='Validation Accuracy')
ax2.set_title('Train and Validation Accuracy')
ax2.set_xlabel('Epoch')
ax2.set_ylabel('Accuracy (%)')
ax2.legend()

plt.show()
